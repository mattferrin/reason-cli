#!/usr/bin/env bash

export ESY__STORE_VERSION=3.x.x

    STRLEN_RESULT=0
    strLen() {
      oLang=$LANG
      LANG=C
      STRLEN_RESULT=${#1}
      LANG=$oLang
    }
    printError() {
      echo >&2 "ERROR:";
      echo >&2 "$0 command is not installed correctly. ";
      TROUBLESHOOTING="When installing <package_name>, did you see any errors in the log? "
      TROUBLESHOOTING="$TROUBLESHOOTING - What does (which <binary_name>) return? "
      TROUBLESHOOTING="$TROUBLESHOOTING - Please file a github issue on <package_name>'s repo."
      echo >&2 "$TROUBLESHOOTING";
    }

if [ -z ${REASON_CLI__ENVIRONMENTSOURCED__REASON_CLI+x} ]; then
  if [ -z ${REASON_CLI__ENVIRONMENTSOURCED+x} ]; then
    # In windows this woudl be: a simple: %~dp0
    SOURCE="${BASH_SOURCE[0]}"
    while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
      SCRIPTDIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
      SOURCE="$(readlink "$SOURCE")"
      [[ $SOURCE != /* ]] && SOURCE="$SCRIPTDIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    done
    SCRIPTDIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    export ESY_EJECT__SANDBOX="$SCRIPTDIR/../rel"
    export PACKAGE_ROOT="$SCRIPTDIR/.."
    # Remove dependency on esy and package managers in general
    # We fake it so that the eject store is the location where we relocated the
    # binaries to.
    export ESY_EJECT__STORE=`cat $PACKAGE_ROOT/records/recordedClientInstallStorePath.txt`
    ENV_PATH="$ESY_EJECT__SANDBOX/node_modules/.cache/_esy/build-eject/eject-env"
    source "$ENV_PATH"
    export REASON_CLI__ENVIRONMENTSOURCED="sourced"
    export REASON_CLI__ENVIRONMENTSOURCED__REASON_CLI="sourced"
  fi
  command -v $0 >/dev/null 2>&1 || {
    printError;
    exit 1;
  }

  if [[ "$1" == ""  ]]; then
    echo ""
    echo "Welcome to reason-cli"
    echo "-------------------------"
    echo "Installed Binaries: [" ocamlmerlin,ocamlmerlin-reason,ocamlrun,ocamlc,ocamlopt,ocaml,rtop,utop,refmt,refmttype,reopt,rebuild,reactjs_jsx_ppx,berror,menhir,ocamlfind,reason-cli "]"
    echo "- reason-cli bash"
    echo   " Starts bash from the perspective of ocamlmerlin and installed binaries."
    echo "- binaryName ----where"
    echo "  Prints the location of binaryName"
    echo "  Example: ocamlmerlin ----where"
    echo "- Note: Running builds and scripts from within "reason-cli bash" will typically increase performance of builds."
    echo ""
  else
    if [ "$1" == "bash" ]; then
      # Important to pass --noprofile, and --rcfile so that the user's
      # .bashrc doesn't run and the npm global packages don't get put in front
      # of the already constructed PATH.
      bash --noprofile --rcfile <(echo 'export PS1="[0;31m⏣ reason-cli: [0m$PS1"')
    else
      echo "Invalid argument $1, type reason-cli for help"
    fi
  fi
  
else
  printError;
  exit 1;
fi
